package com.synergy.keimed_ordergenie.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MASTER_PLACED_ORDER".
 */
public class MasterPlacedOrderDao extends AbstractDao<MasterPlacedOrder, Long> {


    public static final String TABLENAME = "MASTER_PLACED_ORDER";

    /**
     * Properties of entity MasterPlacedOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Json = new Property(1, String.class, "json", false, "JSON");
        public final static Property CustomerID = new Property(2, String.class, "customerID", false, "CUSTOMER_ID");
        public final static Property Doc_ID = new Property(3, String.class, "doc_ID", false, "DOC__ID");
    }

    public MasterPlacedOrderDao(DaoConfig config) {
        super(config);
    }

    public MasterPlacedOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"MASTER_PLACED_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"JSON\" TEXT," + // 1: json
                "\"CUSTOMER_ID\" TEXT," + // 2: customerID
                "\"DOC__ID\" TEXT);"); // 3: doc_ID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MASTER_PLACED_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MasterPlacedOrder entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }

        String customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindString(3, customerID);
        }

        String doc_id = entity.getDoc_ID();
        if (doc_id != null) {
            stmt.bindString(4, doc_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MasterPlacedOrder entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(2, json);
        }

        String customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindString(3, customerID);
        }

        String doc_id = entity.getDoc_ID();
        if (doc_id != null) {
            stmt.bindString(4, doc_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public MasterPlacedOrder readEntity(Cursor cursor, int offset) {
        MasterPlacedOrder entity = new MasterPlacedOrder( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // json
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // doc_id
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // customerID
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, MasterPlacedOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoc_ID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    @Override
    protected final Long updateKeyAfterInsert(MasterPlacedOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(MasterPlacedOrder entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MasterPlacedOrder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    public List<MasterPlacedOrder> getOrder(String clientId) {
        QueryBuilder<MasterPlacedOrder> qb = this.queryBuilder();
        qb.where(Properties.CustomerID.eq(clientId));
        return qb.list();
    }

    public void deleteOrder(String filter) {
        //Log.e("deleteOrderDoc", filter);
        QueryBuilder<MasterPlacedOrder> qb = this.queryBuilder();
        qb.where(qb.or(Properties.Doc_ID.eq(filter), Properties.CustomerID.eq(filter)));
        List l = qb.list();
        deleteInTx(l);
    }

}
