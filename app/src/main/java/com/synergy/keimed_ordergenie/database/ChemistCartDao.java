package com.synergy.keimed_ordergenie.database;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;
import android.widget.Toast;

import com.synergy.keimed_ordergenie.Constants.Constant;
import com.synergy.keimed_ordergenie.Helper.SQLiteHandler;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.DeleteQuery;
import org.greenrobot.greendao.query.QueryBuilder;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CHEMIST_CART".
 */
public class ChemistCartDao extends AbstractDao<ChemistCart, Long> {

    public static final String TABLENAME = "CHEMIST_CART";
    DaoSession daoSession;


    /**
     * Properties of entity ChemistCart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DOC_ID = new Property(1, String.class, "DOC_ID", false, "DOC__ID");
        public final static Property Stockist_Client_id = new Property(2, String.class, "Stockist_Client_id", false, "STOCKIST__CLIENT_ID");
        public final static Property Items = new Property(3, String.class, "Items", false, "ITEMS");
        public final static Property Itemname = new Property(4, String.class, "Itemname", false, "ITEMNAME");
        public final static Property Amount = new Property(5, String.class, "Amount", false, "AMOUNT");
        public final static Property Remarks = new Property(6, String.class, "Remarks", false, "REMARKS");
        public final static Property Salesman = new Property(7, Boolean.class, "Salesman", false, "SALESMAN");
        public final static Property Order_sync = new Property(8, Boolean.class, "order_sync", false, "ORDER_SYNC");
        public final static Property Product_ID = new Property(9, String.class, "Product_ID", false, "PRODUCT__ID");
        public final static Property Qty = new Property(10, String.class, "Qty", false, "QTY");
        public final static Property UOM = new Property(11, String.class, "UOM", false, "UOM");
        public final static Property Rate = new Property(12, String.class, "Rate", false, "RATE");
        public final static Property Price = new Property(13, String.class, "Price", false, "PRICE");
        public final static Property MRP = new Property(14, String.class, "MRP", false, "MRP");
        public final static Property PACK = new Property(15, String.class, "PACK", false, "PACK");
        public final static Property Createdon = new Property(16, String.class, "Createdon", false, "CREATEDON");
        public final static Property Scheme = new Property(17, String.class, "Scheme", false, "SCHEME");
        public final static Property Sub_stkID = new Property(18, String.class, "Sub_stkID", false, "SUBSTOCK");
        public final static Property MINQ = new Property(19, String.class, "min_q", false, "MINQ");
        public final static Property MAXQ = new Property(20, String.class, "max_q", false, "MAXQ");
    }


    public ChemistCartDao(DaoConfig config) {
        super(config);
    }

    public ChemistCartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession=daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {

        Log.i("Check DataBase Name", "" + db.toString());
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHEMIST_CART\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOC__ID\" TEXT," + // 1: DOC_ID
                "\"STOCKIST__CLIENT_ID\" TEXT," + // 2: Stockist_Client_id
                "\"ITEMS\" TEXT," + // 3: Items
                "\"ITEMNAME\" TEXT," + // 4: Itemname
                "\"AMOUNT\" TEXT," + // 5: Amount
                "\"REMARKS\" TEXT," + // 6: Remarks
                "\"SALESMAN\" INTEGER," + // 7: Salesman
                "\"ORDER_SYNC\" INTEGER," + // 8: order_sync
                "\"PRODUCT__ID\" TEXT," + // 9: Product_ID
                "\"QTY\" TEXT," + // 10: Qty
                "\"UOM\" TEXT," + // 11: UOM
                "\"RATE\" TEXT," + // 12: Rate
                "\"PRICE\" TEXT," + // 13: Price
                "\"MRP\" TEXT," + // 14: MRP
                "\"PACK\" TEXT," + // 15: PACK
                "\"CREATEDON\" TEXT," + //16: CreatedOn
                "\"SCHEME\" TEXT," + //17 :Scheme
                "\"SUBSTOCK\" TEXT,"+ //// 18: Substockist
                "\"MINQ\" TEXT,"+ //19 : MINQ
                "\"MAXQ\" TEXT);"); // 20 : MAXQ
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHEMIST_CART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChemistCart entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String DOC_ID = entity.getDOC_ID();
        if (DOC_ID != null) {
            stmt.bindString(2, DOC_ID);
        }

        String Stockist_Client_id = entity.getStockist_Client_id();
        if (Stockist_Client_id != null) {
            stmt.bindString(3, Stockist_Client_id);
        }

        String Items = entity.getItems();
        if (Items != null) {
            stmt.bindString(4, Items);
        }

        String Itemname = entity.getItemname();
        if (Itemname != null) {
            stmt.bindString(5, Itemname);
        }

        String Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindString(6, Amount);
        }

        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(7, Remarks);
        }

        Boolean Salesman = entity.getSalesman();
        if (Salesman != null) {
            stmt.bindLong(8, Salesman ? 1L : 0L);
        }

        Boolean order_sync = entity.getOrder_sync();
        if (order_sync != null) {
            stmt.bindLong(9, order_sync ? 1L : 0L);
        }

        String Product_ID = entity.getProduct_ID();
        if (Product_ID != null) {
            stmt.bindString(10, Product_ID);
        }

        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(11, Qty);
        }

        String UOM = entity.getUOM();
        if (UOM != null) {
            stmt.bindString(12, UOM);
        }

        String Rate = entity.getRate();
        if (Rate != null) {
            stmt.bindString(13, Rate);
        }

        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(14, Price);
        }

        String MRP = entity.getMRP();
        if (MRP != null) {
            stmt.bindString(15, MRP);
        }

        String PACK = entity.getPACK();
        if (PACK != null) {
            stmt.bindString(16, PACK);
        }
        String Createdon = entity.getCreatedon();
        if (Createdon != null) {
            stmt.bindString(17, Createdon);
        }
        String scheme = entity.getScheme();
        if (scheme != null) {
            stmt.bindString(18, scheme);
        }
        String sub_stkID = entity.getSub_stkID();
        if (sub_stkID != null) {
            stmt.bindString(19, sub_stkID);
        }
        String minQ = entity.getMinQ();
        if (minQ != null) {
            stmt.bindString(20, minQ);
        }
        String maxQ = entity.getMaxQ();
        if (minQ != null) {
            stmt.bindString(21, maxQ);
        }

    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChemistCart entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String DOC_ID = entity.getDOC_ID();
        if (DOC_ID != null) {
            stmt.bindString(2, DOC_ID);
        }

        String Stockist_Client_id = entity.getStockist_Client_id();
        if (Stockist_Client_id != null) {
            stmt.bindString(3, Stockist_Client_id);
        }

        String Items = entity.getItems();
        if (Items != null) {
            stmt.bindString(4, Items);
        }

        String Itemname = entity.getItemname();
        if (Items != null) {
            stmt.bindString(5, Itemname);
        }


        String Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindString(6, Amount);
        }

        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(7, Remarks);
        }

        Boolean Salesman = entity.getSalesman();
        if (Salesman != null) {
            stmt.bindLong(8, Salesman ? 1L : 0L);
        }

        Boolean order_sync = entity.getOrder_sync();
        if (order_sync != null) {
            stmt.bindLong(9, order_sync ? 1L : 0L);
        }

        String Product_ID = entity.getProduct_ID();
        if (Product_ID != null) {
            stmt.bindString(10, Product_ID);
        }

        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(11, Qty);
        }

        String UOM = entity.getUOM();
        if (UOM != null) {
            stmt.bindString(12, UOM);
        }

        String Rate = entity.getRate();
        if (Rate != null) {
            stmt.bindString(13, Rate);
        }

        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(14, Price);
        }

        String MRP = entity.getMRP();
        if (MRP != null) {
            stmt.bindString(15, MRP);
        }

        String PACK = entity.getPACK();
        if (PACK != null) {
            stmt.bindString(16, PACK);
        }
        String Createdon = entity.getCreatedon();
        if (Createdon != null) {
            stmt.bindString(17, Createdon);
        }
        String scheme = entity.getScheme();
        if (scheme != null) {
            stmt.bindString(18, scheme);
        }
        String sub_stkID = entity.getSub_stkID();
        if (sub_stkID != null) {
            stmt.bindString(19, sub_stkID);
        }
        String minQ = entity.getMinQ();
        if (minQ != null) {
            stmt.bindString(20, minQ);
        }
        String maxQ = entity.getMaxQ();
        if (minQ != null) {
            stmt.bindString(21, maxQ);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ChemistCart readEntity(Cursor cursor, int offset) {
        ChemistCart entity = new ChemistCart( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DOC_ID
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Stockist_Client_id
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Items
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Itemname
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Amount
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Remarks
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // Salesman
                cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // order_sync
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Product_ID
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Qty
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UOM
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Rate
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Price
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // MRP
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // PACK
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Createdon
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Scheme
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Sub stockist
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // minQ
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // maxQ
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ChemistCart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDOC_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStockist_Client_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItems(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItems(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemarks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSalesman(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setOrder_sync(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setProduct_ID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setQty(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUOM(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMRP(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPACK(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreatedon(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setScheme(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSub_stkID(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMinQ(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMaxQ(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
    }

    @Override
    protected final Long updateKeyAfterInsert(ChemistCart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(ChemistCart entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChemistCart entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /* For Total Cart Count */
    public int getDataCount() {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        return (int) qb.count();
    }

    /* According to CallerId */
    /*public int getCartCountByCallerId(String clientId, boolean salesman) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(Properties.Stockist_Client_id.eq(clientId), Properties.Salesman.eq(salesman));
        return (int) qb.count();
    }*/

    public List<ChemistCart> getCartItem(String clientId, boolean salesman) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(qb.and(Properties.Stockist_Client_id.eq(clientId), Properties.Salesman.eq(salesman)));
        return qb.list();
    }
    public List<ChemistCart> getallCartItemChemist(String clientId, boolean salesman) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        //  qb.where(qb.and(Properties.Stockist_Client_id.eq(clientId), Properties.Salesman.eq(salesman)));
        return qb.list();
    }

    public int gen() {
        Random r = new Random(System.currentTimeMillis());
        return ((1 + r.nextInt(2)) * 10000 + r.nextInt(10000));
    }
       public void getOrderList(int ChemistId) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(qb.and(Properties.Stockist_Client_id.eq(ChemistId),Properties.Createdon.eq(Constant.currentDate)));

}
    public int copyorders(Context ctx,int _source_chemist, int _target_chemist, boolean salesman) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        String Doc_Id = "OG" + sdf.format(Calendar.getInstance().getTime()) + gen();
        SQLiteHandler sqLiteHandler = new SQLiteHandler(ctx);
        JSONObject jsonObject=sqLiteHandler.getLocationDataby(String.valueOf(_source_chemist));
        Log.e("copyordersLoc",""+jsonObject);
        if(jsonObject!=null)
        try{

            sqLiteHandler.insetDataForLocation(jsonObject.getString("UserID"),String.valueOf(_target_chemist)
                    ,jsonObject.getString("Tran_No"),jsonObject.getString("task"),jsonObject.getString("Latitude"),
                    jsonObject.getString("Longitude"),jsonObject.getString("unqid"),jsonObject.getString("CurrentLocation"),
                    Doc_Id);

        }catch(JSONException exception){
            Log.e("copyorderExeption",""+exception);

        }


        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(qb.and(Properties.Stockist_Client_id.eq(_source_chemist),
                Properties.Salesman.eq(salesman)));
     //   Log.d("QueryBuilder", "" + _source_chemist + "====trgt--" + _target_chemist);
   //     Log.d("QueryBuilder", "" + qb.build());



        List<ChemistCart> chemistCarts = qb.list();
      //  Log.d("QueryBuilder", "Chemist----" + chemistCarts);
      //  Log.d("QueryBuilder123", "" + chemistCarts.get(0).getRate() + "---" + chemistCarts.size());
        if (chemistCarts != null & chemistCarts.size() > 0) {
            for (int i = 0; i < chemistCarts.size(); i++) {
                Log.d("QueryBuilder123---" + i, "--" + chemistCarts.get(i).getRate() + "---" + chemistCarts.size());
                //    ChemistCart cart = chemistCarts.get(i);
                ChemistCart cart = new ChemistCart();

                cart.setDOC_ID(Doc_Id);
                cart.setItems(chemistCarts.get(i).getItems());
                cart.setItemname(chemistCarts.get(i).getItemname());
                cart.setProduct_ID(chemistCarts.get(i).getProduct_ID());
                cart.setQty(chemistCarts.get(i).getQty());
                cart.setUOM(chemistCarts.get(i).getUOM());
                cart.setRate(chemistCarts.get(i).getRate());
                cart.setPrice(chemistCarts.get(i).getPrice());
                cart.setMRP(chemistCarts.get(i).getMRP());
                cart.setPACK(chemistCarts.get(i).getPACK());
                cart.setCreatedon(dateFormat.format(Calendar.getInstance().getTime()));
                cart.setSalesman(true);
                cart.setStockist_Client_id(String.valueOf(_target_chemist));
                cart.setRemarks("cart");
                cart.setOrder_sync(false);
                cart.setAmount(chemistCarts.get(i).getAmount());
                cart.setPACK(chemistCarts.get(i).getPACK());
                cart.setScheme(chemistCarts.get(i).getScheme());
                cart.setHalfScheme(chemistCarts.get(i).getHalfScheme());
                cart.setMinQ(chemistCarts.get(i).getMinQ());
                cart.setMaxQ(chemistCarts.get(i).getMaxQ());
                // cart.setSub_stkID("");
                //   cart.setId();
                insert(cart);
            }
        }

        return chemistCarts.size();
    }

    public void insertOrUpdateCart(ChemistCart chemistCart, boolean salesman) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(qb.and(Properties.Stockist_Client_id.eq(chemistCart.getStockist_Client_id()),
                Properties.Product_ID.eq(chemistCart.getProduct_ID()),
                Properties.Salesman.eq(salesman)));

        Log.d("QueryBuilder", "" + qb.build());
        List<ChemistCart> chemistCarts = qb.list();
        if (chemistCarts != null & chemistCarts.size() > 0) {
            ChemistCart cart = chemistCarts.get(0);
            // cart.setQty(String.valueOf(Integer.valueOf(chemistCart.getQty()) + Integer.valueOf(cart.getQty())));
            cart.setQty(String.valueOf(Integer.valueOf(chemistCart.getQty())));
            //cart.setPrice(String.valueOf(Float.valueOf(chemistCart.getRate()) * Float.valueOf(chemistCart.getQty())));    ////---- Old
            // cart.setPrice(String.valueOf(chemistCart.getRate()));      ////---- New
            cart.setPrice(String.valueOf(chemistCart.getPrice()));      ////---- New
            cart.setAmount(chemistCart.getPrice());
            // Log.d("updateCart", "Updated Section");
            update(cart);
        } else {
            //Log.d("insertCart", "Inserted Section");
            insert(chemistCart);
        }
    }


    /* Get All Order By UserId */
    /*public List<ChemistCart> getAllOrderByChemistId(String callPlanId, boolean salesman) {
        QueryBuilder<ChemistCart> qb = this.queryBuilder();
        qb.where(qb.and(Properties.Stockist_Client_id.eq(clientId), Properties.Salesman.eq(salesman)));
        return qb.list();
    }*/


    public void deleteCartItem(String callPlanId) {
 /*  QueryBuilder<ChemistCart> qb = this.queryBuilder();
  qb.where(Properties.Stockist_Client_id.eq(callPlanId)).buildDelete();
 */
        final DeleteQuery<ChemistCart> tableDeleteQuery = daoSession.queryBuilder(ChemistCart.class)
                .where(Properties.Stockist_Client_id.eq(callPlanId))
                .buildDelete();
        tableDeleteQuery.executeDeleteWithoutDetachingEntities();
        daoSession.clear();

    }
}
