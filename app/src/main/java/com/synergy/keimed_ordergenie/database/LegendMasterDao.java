package com.synergy.keimed_ordergenie.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEGEND_MASTER".
*/
public class LegendMasterDao extends AbstractDao<LegendMaster, Long> {

    public static final String TABLENAME = "LEGEND_MASTER";

    /**
     * Properties of entity LegendMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StockistId = new Property(1, String.class, "stockistId", false, "STOCKIST_ID");
        public final static Property LegendName = new Property(2, String.class, "LegendName", false, "LEGEND_NAME");
        public final static Property ColorCode = new Property(3, String.class, "ColorCode", false, "COLOR_CODE");
        public final static Property StartRange = new Property(4, String.class, "StartRange", false, "START_RANGE");
        public final static Property EndRange = new Property(5, String.class, "EndRange", false, "END_RANGE");
        public final static Property StockLegendID = new Property(6, String.class, "StockLegendID", false, "STOCK_LEGEND_ID");
        public final static Property LegendMode = new Property(7, String.class, "LegendMode", false, "LEGEND_MODE");
    }


    public LegendMasterDao(DaoConfig config) {
        super(config);
    }
    
    public LegendMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEGEND_MASTER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STOCKIST_ID\" TEXT," + // 1: stockistId
                "\"LEGEND_NAME\" TEXT," + // 2: LegendName
                "\"COLOR_CODE\" TEXT," + // 3: ColorCode
                "\"START_RANGE\" TEXT," + // 4: StartRange
                "\"END_RANGE\" TEXT," + // 5: EndRange
                "\"STOCK_LEGEND_ID\" TEXT," + // 6: StockLegendID
                "\"LEGEND_MODE\" TEXT);"); // 7: LegendMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEGEND_MASTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LegendMaster entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockistId = entity.getStockistId();
        if (stockistId != null) {
            stmt.bindString(2, stockistId);
        }
 
        String LegendName = entity.getLegendName();
        if (LegendName != null) {
            stmt.bindString(3, LegendName);
        }
 
        String ColorCode = entity.getColorCode();
        if (ColorCode != null) {
            stmt.bindString(4, ColorCode);
        }
 
        String StartRange = entity.getStartRange();
        if (StartRange != null) {
            stmt.bindString(5, StartRange);
        }
 
        String EndRange = entity.getEndRange();
        if (EndRange != null) {
            stmt.bindString(6, EndRange);
        }
 
        String StockLegendID = entity.getStockLegendID();
        if (StockLegendID != null) {
            stmt.bindString(7, StockLegendID);
        }
 
        String LegendMode = entity.getLegendMode();
        if (LegendMode != null) {
            stmt.bindString(8, LegendMode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LegendMaster entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockistId = entity.getStockistId();
        if (stockistId != null) {
            stmt.bindString(2, stockistId);
        }
 
        String LegendName = entity.getLegendName();
        if (LegendName != null) {
            stmt.bindString(3, LegendName);
        }
 
        String ColorCode = entity.getColorCode();
        if (ColorCode != null) {
            stmt.bindString(4, ColorCode);
        }
 
        String StartRange = entity.getStartRange();
        if (StartRange != null) {
            stmt.bindString(5, StartRange);
        }
 
        String EndRange = entity.getEndRange();
        if (EndRange != null) {
            stmt.bindString(6, EndRange);
        }
 
        String StockLegendID = entity.getStockLegendID();
        if (StockLegendID != null) {
            stmt.bindString(7, StockLegendID);
        }
 
        String LegendMode = entity.getLegendMode();
        if (LegendMode != null) {
            stmt.bindString(8, LegendMode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LegendMaster readEntity(Cursor cursor, int offset) {
        LegendMaster entity = new LegendMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stockistId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // LegendName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ColorCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // StartRange
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EndRange
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // StockLegendID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // LegendMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LegendMaster entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStockistId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLegendName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColorCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartRange(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndRange(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStockLegendID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLegendMode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LegendMaster entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LegendMaster entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LegendMaster entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
