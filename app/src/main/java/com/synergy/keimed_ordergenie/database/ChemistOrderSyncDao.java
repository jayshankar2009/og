package com.synergy.keimed_ordergenie.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHEMIST_ORDER_SYNC".
*/
public class ChemistOrderSyncDao extends AbstractDao<ChemistOrderSync, Long> {

    public static final String TABLENAME = "CHEMIST_ORDER_SYNC";

    /**
     * Properties of entity ChemistOrderSync.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNo = new Property(1, String.class, "OrderNo", false, "ORDER_NO");
        public final static Property ItemSrNo = new Property(2, String.class, "ItemSrNo", false, "ITEM_SR_NO");
        public final static Property Item_Name = new Property(3, String.class, "Item_Name", false, "ITEM__NAME");
        public final static Property MRP = new Property(4, String.class, "MRP", false, "MRP");
        public final static Property Packsize = new Property(5, String.class, "Packsize", false, "PACKSIZE");
        public final static Property Qty = new Property(6, String.class, "Qty", false, "QTY");
    }


    public ChemistOrderSyncDao(DaoConfig config) {
        super(config);
    }
    
    public ChemistOrderSyncDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHEMIST_ORDER_SYNC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: OrderNo
                "\"ITEM_SR_NO\" TEXT," + // 2: ItemSrNo
                "\"ITEM__NAME\" TEXT," + // 3: Item_Name
                "\"MRP\" TEXT," + // 4: MRP
                "\"PACKSIZE\" TEXT," + // 5: Packsize
                "\"QTY\" TEXT);"); // 6: Qty
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHEMIST_ORDER_SYNC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChemistOrderSync entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String OrderNo = entity.getOrderNo();
        if (OrderNo != null) {
            stmt.bindString(2, OrderNo);
        }
 
        String ItemSrNo = entity.getItemSrNo();
        if (ItemSrNo != null) {
            stmt.bindString(3, ItemSrNo);
        }
 
        String Item_Name = entity.getItem_Name();
        if (Item_Name != null) {
            stmt.bindString(4, Item_Name);
        }
 
        String MRP = entity.getMRP();
        if (MRP != null) {
            stmt.bindString(5, MRP);
        }
 
        String Packsize = entity.getPacksize();
        if (Packsize != null) {
            stmt.bindString(6, Packsize);
        }
 
        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(7, Qty);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChemistOrderSync entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String OrderNo = entity.getOrderNo();
        if (OrderNo != null) {
            stmt.bindString(2, OrderNo);
        }
 
        String ItemSrNo = entity.getItemSrNo();
        if (ItemSrNo != null) {
            stmt.bindString(3, ItemSrNo);
        }
 
        String Item_Name = entity.getItem_Name();
        if (Item_Name != null) {
            stmt.bindString(4, Item_Name);
        }
 
        String MRP = entity.getMRP();
        if (MRP != null) {
            stmt.bindString(5, MRP);
        }
 
        String Packsize = entity.getPacksize();
        if (Packsize != null) {
            stmt.bindString(6, Packsize);
        }
 
        String Qty = entity.getQty();
        if (Qty != null) {
            stmt.bindString(7, Qty);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChemistOrderSync readEntity(Cursor cursor, int offset) {
        ChemistOrderSync entity = new ChemistOrderSync( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // OrderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ItemSrNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Item_Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MRP
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Packsize
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Qty
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChemistOrderSync entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemSrNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_Name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMRP(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPacksize(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQty(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChemistOrderSync entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChemistOrderSync entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChemistOrderSync entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
